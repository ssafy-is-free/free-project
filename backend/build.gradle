plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.10'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.sonarqube" version "3.5.0.2730"
    id 'jacoco'
}
jacoco {
    toolVersion = '0.8.5'
}
test {
    jacoco {
        // 아래 설정들은 모두 기본 값. 따라서 변경할 것이 없다면 적어주지 않아도 됨
        enabled = true
        destinationFile = file("$buildDir/jacoco/${name}.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
    finalizedBy 'jacocoTestReport'
}
jacocoTestReport {
    reports {
        html.enabled true // html 만들어 - 로컬에서 쉽게 보기 위함
        xml.enabled true // xml 만들어 - 소나큐브 연동 위함
        csv.enabled false // csv 안 만들어

        // xml.destination file("${buildDir}/jacoco/result.xml") // 여기 저장할 것이라는 뜻.
    }
    finalizedBy 'jacocoTestCoverageVerification'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true // 이 rule을 적용할 것이다.
            element = 'CLASS' // class 단위로

            // 브랜치 커버리지 최소 50%
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 50
            }

            // 라인 커버리지 최소한 80%
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 80
            }

            // 빈 줄을 제외한 코드의 라인수 최대 300라인
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 300
            }

            // 커버리지 체크를 제외할 클래스들
            excludes = [
                    '**/oauth/*',
                    '**/auth/*',
                    '**/entity/*.java',
                    '*.CustomOAuth2SuccessHandler.*'
            ]
        }
    }
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}



dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // 외부 api 호출
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // Spring Boot Configuration Annotation Processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    // Swagger 설정
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.5'


    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.security:spring-security-test'

    //querydsl
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-jpa"

    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"
    // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응

    //JWT 의존성 추가
    implementation "io.jsonwebtoken:jjwt:0.9.1"
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10.1'
    //mockito 의존성 추가
    testImplementation 'org.mockito:mockito-inline:3.6.0'


    // H2 - 테스트용
    runtimeOnly 'com.h2database:h2'

    //모니터링 관련
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

//	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.2'
//	implementation 'com.squareup.okhttp3:okhttp:4.9.3' //okhttp

    //mariaDB 의존성 추가.
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    //mac os에서 netty쓸때 필요한 의존성 추가
    runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.94.Final:osx-aarch_64'

}




tasks.named('test') {
    useJUnitPlatform()
}

/** clean 태스크 실행시 QClass 삭제 */
clean {
    delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성위치
}

/**
 * 인텔리제이 Annotation processor 에 생성되는 'src/main/generated' 디렉터리 삭제
 */
tasks.register('cleanGeneatedDir') { // 인텔리제이 annotation processor 가 생성한 Q클래스가 clean 태스크로 삭제되는 게 불편하다면 둘 중에 하나를 선택
    delete file('src/main/generated')
}